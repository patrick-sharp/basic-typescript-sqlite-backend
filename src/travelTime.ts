import { dbOperations } from './database';
// in meters per second
const METERS_IN_MILE = 1609.344;
const SECONDS_IN_HOUR = 3600;

// miles per hour
const SHIP_SPEED_MPH = 1000

// meters per second
const SHIP_SPEED_MPS = SHIP_SPEED_MPH * METERS_IN_MILE / SECONDS_IN_HOUR;

// generated by duckduckgo llm search - seems wrong in practice
//function haversine_dist(lat1, lat2, lon1, lon2) {
//  const R = 6371e3; // Earth's radius in meters
//  const φ1 = lat1 * Math.PI / 180; // φ, λ in radians
//  const φ2 = lat2 * Math.PI / 180;
//  const Δφ = (lat2 - lat1) * Math.PI / 180;
//  const Δλ = (lon2 - lon1) * Math.PI / 180;
//
//  const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);
//
//  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
//  const d = R * c; // distance in meters
//  return d
//}


// stack overflow instead
function getDistanceFromLatLonInMeters(lat1,lon1,lat2,lon2) {
  var R = 6371000; // Radius of the earth in m
  var dLat = deg2rad(lat2-lat1);  // deg2rad below
  var dLon = deg2rad(lon2-lon1); 
  var a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
    Math.sin(dLon/2) * Math.sin(dLon/2)
    ; 
  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
  var d = R * c; // Distance in km
  return d;
}

function deg2rad(deg) {
  return deg * (Math.PI/180)
}

export async function computeTravelTime(startCode: string, endCode: string) {
  const start = await dbOperations.getLocation(startCode);
  const end = await dbOperations.getLocation(endCode);

  const lat1 = start.latitude
  const lat2 = end.latitude
  const lon1 = start.longitude
  const lon2 = end.longitude
  //const dist = haversine_dist(lat1, lon1, lat2, lon2)
  const dist = getDistanceFromLatLonInMeters(lat1, lon1, lat2, lon2)

  const travelTimeSeconds = dist / SHIP_SPEED_MPS
  return travelTimeSeconds
}
